// forwarder.js
import { Telegraf } from 'telegraf';

// ENV
const BOT_TOKEN     = process.env.BOT_TOKEN;           // —Ç–æ–∫–µ–Ω –±–æ—Ç–∞-–ø–µ—Ä–µ—Å—ã–ª—å—â–∏–∫–∞
const SOURCE_CHAT_ID = Number(process.env.SOURCE_CHAT_ID); // —á–∞—Ç, –≥–¥–µ –±–æ—Ç –ª–æ–≤–∏—Ç –∑–∞—è–≤–∫–∏
const DEST_CHAT_ID   = Number(process.env.DEST_CHAT_ID);   // –≥—Ä—É–ø–ø–∞ –∞–¥–º–∏–Ω–æ–≤ (–∫—É–¥–∞ –∫–æ–ø–∏—Ä—É–µ–º)

if (!BOT_TOKEN) throw new Error("BOT_TOKEN is required");
if (!SOURCE_CHAT_ID) throw new Error("SOURCE_CHAT_ID is required");
if (!DEST_CHAT_ID) throw new Error("DEST_CHAT_ID is required");

const bot = new Telegraf(BOT_TOKEN);

// —Ä–µ–≥—ç–∫—Å–ø—ã –Ω–∞ –¥–≤–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
const reOrder  = /^\s*‚úÖ\s*–ü–æ–¥—Ç–≤–µ—Ä–∂–¥[—ë–µ]–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\s*üõç/i;
const reRecord = /^\s*–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å!‚úèÔ∏è/i;

// —Ö–µ–ª–ø–µ—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
function isTarget(text) {
  if (!text) return false;
  return reOrder.test(text) || reRecord.test(text);
}

bot.on('message', async (ctx) => {
  try {
    const msg = ctx.message;
    const chatId = msg.chat.id;

    // —Å–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ ¬´–∏—Å—Ç–æ—á–Ω–∏–∫¬ª
    if (chatId !== SOURCE_CHAT_ID) return;

    // —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞
    const text =
      'text' in msg ? msg.text :
      ('caption' in msg ? msg.caption : '');

    if (!isTarget(text)) return;

    // –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ç–µ–ª—å –Ω–∞ –≤—Å—è–∫–∏–π
    if (chatId === DEST_CHAT_ID) return;

    // –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª (—Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞/—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    await ctx.telegram.copyMessage(DEST_CHAT_ID, chatId, msg.message_id);
  } catch (err) {
    console.error('Forward error:', err);
  }
});

// —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è server.js
export default bot;
